unit Unit1;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Menus, ExtCtrls, StdCtrls;

type
  TForm1 = class(TForm)
    MainMenu1: TMainMenu;
    Exit1: TMenuItem;
    Timer: TTimer;
    ConsoleDebug1: TMenuItem;
    PauseLabel: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure Exit1Click(Sender: TObject);
    procedure FormPaint(Sender: TObject);
    procedure TimerTimer(Sender: TObject);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure ConsoleDebug1Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

  SnakeComp = array of integer;

  TSnake = class
    HeadX: integer;
    HeadY: integer;
    VectX: integer;
    VectY: integer;
    Level: integer;
    Procedure Move;
    Procedure ChangeMove(X, Y: integer);
    Procedure Render;
    Procedure Eat;
    Procedure Defeat;
    Procedure LevelUp;
    Procedure Reboot;
    constructor create;
  end;

  TFood = class
    Level: integer;
    FX: integer;
    FY: integer;
    Color: TColor;
    Procedure Render;
    Procedure Respawn;
    constructor create;
  end;

var
  Form1: TForm1;
  DebugCall: Boolean = False;
  CoordX, CoordY: SnakeComp;
  Snake: TSnake;
  Food: TFood;
  First: Boolean = True;


implementation

uses Unit2;

{$R *.dfm}

Procedure GameStart;
  begin
    Form1.Timer.Enabled := True;
    First := false;
    Form1.PauseLabel.Visible := false;
  end;

Procedure TSnake.LevelUp;
  begin
    Snake.Level := Snake.Level + 1;
    SetLength(CoordX, Snake.Level);
    SetLength(CoordY, Snake.Level);
  end;

Procedure SendAnalize;
  var
    i: integer;
  begin
    Unit2.DebugConsole.ConsoleMemo.Lines.Clear;
    Unit2.DebugConsole.ConsoleMemo.Lines.Add('Level = ' + IntToStr(Snake.Level));
    Unit2.DebugConsole.ConsoleMemo.Lines.Add('Refresh rate = ' + IntToStr(Form1.Timer.Interval));
    for i := 0 to Snake.Level - 1 do
      begin
        Unit2.DebugConsole.ConsoleMemo.Lines.Add('CoordX' + IntToStr(i) + ' = ' + IntToStr(CoordX[i]));
        Unit2.DebugConsole.ConsoleMemo.Lines.Add('CoordY' + IntToStr(i) + ' = ' + IntToStr(CoordY[i]));
      end;
  end;

constructor TSnake.Create;
  const
    speed = 5;
  begin
    Level := 1;
    HeadX := 400;
    HeadY := 400;
    VectX := 0;
    VectY := -speed;
  end;

constructor TFood.Create;
  begin
    FX := 100;
    FY := 100;
    Level := 1;
    Color := clGreen;
  end;

Procedure TSnake.Eat;
  begin
    Snake.Level := Snake.Level + Food.Level;
    SetLength(CoordX, Snake.Level);
    SetLength(CoordY, snake.level);
    Food.Respawn;
  end;

Procedure TSnake.Move;
  var
    i: integer;
  begin
    HeadX := HeadX + VectX;
    HeadY := HeadY + VectY;
    if HeadX < 0 then HeadX := HeadX + 800;
    if HeadY < 0 then HeadY := HeadY + 800;
    if HeadX > 800 then HeadX := HeadX - 800;
    If HeadY > 800 then HeadY := HeadY - 800;
    if (Level > 1)
      then
        begin
          for i := 1 to (Level - 1) do
            begin
              CoordX[Level - i] := CoordX[Level - (i + 1)];
              CoordY[Level - i] := CoordY[Level - (i + 1)];
            end;
        end;
    CoordX[0] := HeadX;
    CoordY[0] := HeadY;
    if (Snake.HeadX = Food.FX) and (Snake.HeadY = Food.FY)
      then
        Snake.Eat;
    for i := 1 to (Level - 1) do
            begin
              if (CoordX[0] = CoordX[i]) and (CoordY[0] = CoordY[i])
                then
                  Snake.Defeat;
            end;
  end;

Procedure TSnake.ChangeMove(X, Y: integer);
  begin
    VectX := X;
    VectY := Y;
  end;

Procedure TSnake.Render;
  const
    scale = 5;
  var
    i: integer;
    X, Y: integer;
  begin
    with Form1.Canvas do
      begin
        Brush.Color := clRed;
        Pen.Color := clRed;
      end;
    For i := 0 to (Level - 1) do
      begin
        X := CoordX[i];
        Y := CoordY[i];
        with Form1.Canvas do
          begin
            Ellipse(X - scale, Y - scale, X + scale, Y + scale);
            FloodFill(X, Y, clRed, fsSurface);
          end;
      end;
  end;

Procedure TSnake.Defeat;
  begin
    Form1.Timer.Enabled := False;
    Sleep(1000);
    SetLength(CoordX, Snake.Level);
    SetLength(CoordY, Snake.level);
    First := true;
    Form1.PauseLabel.Visible := true;
    Snake.Reboot;
    Food.Respawn;
  end;

Procedure TFood.Render;
  begin
    with Form1.Canvas do
      begin
        Pen.Color := Color;
        Brush.Color := Color;
        Ellipse(FX - 5, FY - 5, FX + 5, FY + 5);
        FloodFill(FX, FY, clRed, fsSurface);
      end;
  end;

Procedure TSnake.Reboot;
  const
    speed = 5;
  begin
    Level := 1;
    HeadX := 400;
    HeadY := 400;
    VectX := 0;
    VectY := -speed;
  end;

procedure TFood.Respawn;
  const
    scale = 10;
  var
    j: integer;
  begin
    j := Random(78) + 1;
    FX := scale * j;
    j := Random(78) + 1;
    FY := scale * j;
    j := Random(10) + 1;
    case j of
      1,2,3,4,5:
        begin
          Color := clGreen;
          Level := 1;
        end;
      6,7,8:
        begin
          Color := clBlue;
          Level := 2;
        end;
      9,10:
        begin
          Color := clYellow;
          Level := 3;
        end;
    end;
  end;

procedure TForm1.FormCreate(Sender: TObject);
  begin
    randomize;
    Form1.Color := clWhite;
    Canvas.Pen.Width := 2;
    Snake := TSnake.create;
    Food := TFood.create;
    SetLength(CoordX, Snake.Level);
    SetLength(CoordY, Snake.Level);
    Food.Respawn;
  end;

procedure TForm1.Exit1Click(Sender: TObject);
  begin
    Timer.Enabled := False;
    Snake.Free;
    Food.Free;
    close;
  end;

procedure TForm1.FormPaint(Sender: TObject);
  begin
    Snake.Move;
    Snake.Render;
    Food.Render;
  end;

procedure TForm1.TimerTimer(Sender: TObject);
  begin
    Form1.Repaint;
    if DebugCall = True
      then
        SendAnalize;
  end;

procedure TForm1.FormKeyPress(Sender: TObject; var Key: Char);
  const
    speed = 5;
  begin
    if First = True
      then
        GameStart
      else
        begin
          case Key of
            'w':
              begin
                if (Snake.VectY = 0) then
                  Snake.ChangeMove(0, -speed);
              end;
            's':
              begin
                if (Snake.VectY = 0) then
                  Snake.ChangeMove(0, speed);
              end;
            'a':
              begin
                if (Snake.VectX = 0) then
                  Snake.ChangeMove(-speed, 0);
              end;
            'd':
              begin
                if (Snake.VectX = 0) then
                  Snake.ChangeMove(speed, 0);
              end;
            chr(8):
              begin
                close;
              end;
            end;
        end;
  end;

procedure TForm1.ConsoleDebug1Click(Sender: TObject);
  begin
    if (not Assigned(DebugConsole))
      then
        DebugConsole := TDebugConsole.Create(Self);
    DebugConsole.Show;
    DebugCall := True;
  end;

end.
